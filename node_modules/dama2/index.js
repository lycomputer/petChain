// Generated by CoffeeScript 1.10.0
var Dama2, _, crypto, desEncode, fs, postJson, request;

request = require('request');

crypto = require('crypto');

_ = require('lodash');

fs = require('fs');

desEncode = function(param) {
  var alg, autoPad, ciph, cipher, iv, key, plaintext;
  key = new Buffer(param.key);
  iv = new Buffer(param.iv ? param.iv : 0);
  plaintext = param.plaintext;
  alg = param.alg;
  autoPad = param.autoPad;
  cipher = crypto.createCipheriv(alg, key, iv);
  cipher.setAutoPadding(autoPad);
  ciph = cipher.update(plaintext, 'utf8', 'hex');
  return ciph += cipher.final('hex');
};

postJson = function(uri, opts, cb) {
  var options;
  options = {
    url: uri,
    json: true
  };
  options = _.merge(options, opts);
  return request.post(options, cb);
};

Dama2 = (function() {
  function Dama2(_appId, _appKey, _username, _password, _baseUrl) {
    this._appId = _appId;
    this._appKey = _appKey;
    this._username = _username;
    this._password = _password;
    this._baseUrl = _baseUrl != null ? _baseUrl : 'http://api.dama2.com:7788';
    this._auth = '';
    this._logined = false;
    if (!(this._appId && this._appKey && this._username && this._password)) {
      throw new Error;
    }
  }

  Dama2.prototype._genDamatuEncInfo = function(preauth, user, pwd, key) {
    var encData, i, j, k, key16, key8, md5, param;
    md5 = crypto.createHash('md5');
    md5.update(pwd);
    pwd = md5.digest('hex');
    encData = preauth + "\n" + user + "\n" + pwd;
    key16 = [];
    for (i = j = 0; j < 31; i = j += 2) {
      key16.push("0x" + key[i] + key[i + 1]);
    }
    key8 = [];
    for (i = k = 0; k < 8; i = k += 1) {
      key8[i] = Number(key16[i]) ^ Number(key16[i + 8]) & 0xff;
    }
    param = {
      alg: 'des-ecb',
      autoPad: true,
      key: key8,
      plaintext: encData,
      iv: null
    };
    return desEncode(param, key8);
  };

  Dama2.prototype._preAuth = function(user, pwd, appKey, cb) {
    return postJson(this._baseUrl + "/app/preauth", {}, (function(_this) {
      return function(error, resp, body) {
        var encinfo;
        if (error) {
          return cb(error);
        }
        if (Number(body.ret) !== 0) {
          return cb(new Error(body.desc));
        }
        encinfo = _this._genDamatuEncInfo(body.auth, user, pwd, appKey);
        return cb(error, encinfo);
      };
    })(this));
  };


  /*
  注册普通用户，非开发者
  userInfoObj
    user    String 用户名
    pwd     String 密码
    qq      String QQ号
    email   String 邮箱
    tel     String 电话
   */

  Dama2.prototype.register = function(userInfoObj, appID, appKey, cb) {
    if (!(userInfoObj.user && userInfoObj.pwd && userInfoObj.qq && userInfoObj.email && userInfoObj.tel)) {
      return new Error('invalid user info');
    }
    return this._preAuth(userInfoObj.user, userInfoObj.pwd, appKey, (function(_this) {
      return function(error, encinfo) {
        return postJson(_this._baseUrl + "/app/register", {
          form: {
            appID: appID,
            encinfo: encinfo,
            qq: userInfoObj.qq,
            email: userInfoObj.email,
            tel: userInfoObj.tel
          }
        }, function(error, resp, body) {
          return cb(error, body);
        });
      };
    })(this));
  };

  Dama2.prototype.login = function(cb) {
    if (this._logined && this._auth) {
      return cb(null, this._auth);
    }
    return this._preAuth(this._username, this._password, this._appKey, (function(_this) {
      return function(error, encinfo) {
        if (error) {
          return cb(error);
        }
        return postJson(_this._baseUrl + "/app/login", {
          form: {
            appID: _this._appId,
            encinfo: encinfo
          }
        }, function(error, resp, body) {
          if (error) {
            return cb(error);
          }
          if (Number(body.ret) !== 0) {
            return cb(new Error(body.desc));
          }
          if (body.auth && body.auth !== _this._auth) {
            _this._auth = body.auth;
          }
          _this._logined = true;
          return cb(error, _this._auth);
        });
      };
    })(this));
  };

  Dama2.prototype.readUserInfo = function(cb) {
    if (!this._logined) {
      return cb(new Error('not login'));
    }
    return postJson(this._baseUrl + "/app/readInfo", {
      form: {
        auth: this._auth
      }
    }, (function(_this) {
      return function(error, resp, body) {
        if (error) {
          return cb(error);
        }
        if (Number(body.ret) !== 0) {
          return cb(new Error(body.desc));
        }
        if (body.auth && body.auth !== _this._auth) {
          _this._auth = body.auth;
        }
        return cb(error, body);
      };
    })(this));
  };

  Dama2.prototype.getBalance = function(cb) {
    if (!this._logined) {
      return cb(new Error('not login'));
    }
    return postJson(this._baseUrl + "/app/getBalance", {
      form: {
        auth: this._auth
      }
    }, (function(_this) {
      return function(error, resp, body) {
        if (error) {
          return cb(error);
        }
        if (Number(body.ret) !== 0) {
          return cb(new Error(body.desc));
        }
        if (body.auth && body.auth !== _this._auth) {
          _this._auth = body.auth;
        }
        return cb(error, body);
      };
    })(this));
  };

  Dama2.prototype.decode = function(type, url, len, timeout, cookie, referer, cb) {
    if (len == null) {
      len = 0;
    }
    if (timeout == null) {
      timeout = 60;
    }
    if (cookie == null) {
      cookie = '';
    }
    if (referer == null) {
      referer = '';
    }
    if (!this._logined) {
      return cb(new Error('not login'));
    }
    if (!type) {
      return cb(new Error('no type'));
    }
    if (!url) {
      return cb(new Error('no url'));
    }
    return postJson(this._baseUrl + "/app/decodeURL", {
      form: {
        auth: this._auth,
        url: url,
        type: type,
        len: len,
        timeout: timeout,
        cookie: cookie,
        referer: referer
      }
    }, (function(_this) {
      return function(error, resp, body) {
        if (error) {
          return cb(error);
        }
        if (Number(body.ret) !== 0) {
          return cb(new Error(body.desc));
        }
        if (body.auth && body.auth !== _this._auth) {
          _this._auth = body.auth;
        }
        return cb(error, body);
      };
    })(this));
  };

  Dama2.prototype.simpleDecode = function(type, url, referer, cb) {
    return this.decode(type, url, null, null, null, referer, (function(_this) {
      return function(error, result) {
        var id;
        if (error) {
          return cb(error);
        }
        if (Number(result.ret) !== 0) {
          return cb(new Error(result.desc));
        }
        id = result.id;
        return _this.getResult(id, function(error, result) {
          if (error) {
            return cb(error);
          }
          if (Number(result.ret) !== 0) {
            return cb(new Error(result.desc));
          }
          return cb(error, id, result.result);
        });
      };
    })(this));
  };

  Dama2.prototype.decodeFile = function(type, filePath, len, timeout, cb) {
    if (len == null) {
      len = 0;
    }
    if (timeout == null) {
      timeout = 60;
    }
    if (!this._logined) {
      return cb(new Error('not login'));
    }
    if (!type) {
      return cb(new Error('no type'));
    }
    if (!fs.existsSync(filePath)) {
      return cb(new Error('file not exists'));
    }
    return postJson(this._baseUrl + "/app/decode", {
      formData: {
        auth: this._auth,
        type: type,
        len: len,
        timeout: timeout,
        file: fs.createReadStream(filePath)
      }
    }, (function(_this) {
      return function(error, resp, body) {
        if (error) {
          return cb(error);
        }
        if (Number(body.ret) !== 0) {
          return cb(new Error(body.desc));
        }
        if (body.auth && body.auth !== _this._auth) {
          _this._auth = body.auth;
        }
        return cb(error, body);
      };
    })(this));
  };

  Dama2.prototype.simpleDecodeFile = function(type, filePath, cb) {
    return this.decodeFile(type, filePath, 0, 30, (function(_this) {
      return function(error, result) {
        var id;
        if (error) {
          return cb(error);
        }
        if (Number(result.ret) !== 0) {
          return cb(new Error(result.desc));
        }
        id = result.id;
        return _this.getResult(id, function(error, result) {
          if (error) {
            return cb(error);
          }
          if (Number(result.ret) !== 0) {
            return cb(new Error(result.desc));
          }
          return cb(error, id, result.result);
        });
      };
    })(this));
  };

  Dama2.prototype.getResult = function(id, cb) {
    if (!this._logined) {
      return cb(new Error('not login'));
    }
    if (!id) {
      return cb(new Error('no id'));
    }
    return postJson(this._baseUrl + "/app/getResult", {
      form: {
        auth: this._auth,
        id: id
      }
    }, (function(_this) {
      return function(error, resp, body) {
        if (error) {
          return cb(error);
        }
        if (Number(body.ret) !== 0) {
          return cb(new Error(body.desc));
        }
        if (body.auth && body.auth !== _this._auth) {
          _this._auth = body.auth;
        }
        return cb(error, body);
      };
    })(this));
  };

  Dama2.prototype.reportError = function(id, cb) {
    if (!this._logined) {
      return cb(new Error('not login'));
    }
    if (!id) {
      return cb(new Error('no id'));
    }
    return postJson(this._baseUrl + "/app/reportError", {
      form: {
        auth: this._auth,
        id: id
      }
    }, function(error, resp, body) {
      if (error) {
        return cb(error);
      }
      if (Number(body.ret) !== 0) {
        return cb(new Error(body.desc));
      }
      if (body.auth && body.auth !== this._auth) {
        this._auth = body.auth;
      }
      return cb(error, body);
    });
  };

  return Dama2;

})();

module.exports = Dama2;
